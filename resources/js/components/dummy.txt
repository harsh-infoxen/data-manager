Controller
<?php

namespace App\Http\Controllers;

use App\Exports\ClientExport;
use App\Imports\ClientImport;
use App\Models\Clients;
use Illuminate\Http\Request;
use Log;

use Maatwebsite\Excel\Facades\Excel;

class ClientController extends Controller
{
    public function removeDuplicates(Request $request)
    {
        $request->validate([
            'file' => 'required|mimes:xls,xlsx'
        ]);
        $file = $request->file('file')->store('uploads');
        $clientData = Excel::toArray([], $file)[0];
        $headers = array_shift($clientData);
        $emailMap = [];
        foreach ($clientData as $row) {
            $emailMap[$row[2]] = $row;
        }
        $clients = Clients::all(['first_name', 'last_name', 'email'])->keyBy('email')->toArray();
        foreach ($clients as $email => $client) {
            if (isset($emailMap[$email])) {
                unset($emailMap[$email]);
            }
        }
        $newClientData = array_merge([$headers], array_values($emailMap));
        Log::debug($newClientData);
        return Excel::download(new ClientExport($newClientData),'new_excel_file.xlsx');

    }
    // public function removeDuplicates(Request $request)
    // {
    //     $request->validate([
    //         'file' => 'required|mimes:xls,xlsx',
    //     ]);

    //     $file = $request->file('file')->store('uploads');

    //     try {
    //         $import = new ClientImport();
    //         $import->import($file);
    //     } catch (\Exception $e) {
    //         return response()->json(['error' => 'Error during import: ' . $e->getMessage()], 422);
    //     }

        
    //     return response()->json(['message' => 'Clients imported successfully'], 200);
    // }
}




Frontend.array_values

<template>
  <v-container>
    <v-row class="header">
      <!-- Upload buttons -->
      <v-col cols="6">
        <v-file-input
          v-model="selectedFile"
          label="Choose Excel File"
          accept=".xls, .xlsx"
          @change="handleFileChange"
        ></v-file-input>
      </v-col>

      <v-col class="mt-2">
        <v-btn @click="removeDuplicateAndDownload" color="info" class="mr-4"
          >Remove Duplicates and Download</v-btn
        >
        <v-btn @click="importFiles" color="info" disabled>Save Data</v-btn>
      </v-col>
    </v-row>

    <!--fiters -->
    <v-row class="my-4">
      <v-col>
        <v-text-field v-model="email" label="Search by Email"></v-text-field>
      </v-col>
      <v-col class="row-pointer">
        <v-text-field
          v-model="formattedDate"
          label="Search by Date"
          @click="openDatePickerModal"
          append-icon="mdi-calendar"
          id="slected-dat"
        >
          <v-dialog v-model="datePickerModal" width="290px">
            <div>
              <v-date-picker v-model="date" scrollable>
                <div class="flex-grow-1"></div>
              </v-date-picker>
              <v-row
                class="v-sheet v-theme--customeTheme v-picker v-date-picker v-date-picker--month cutout-mode"
              >
                <v-col>
                  <v-btn text color="primary" @click="closeDatePickerModal"
                    >Cancel</v-btn
                  >
                  <v-btn text color="primary" @click="saveDate">OK</v-btn>
                </v-col>
              </v-row>
            </div>
          </v-dialog>
        </v-text-field>
      </v-col>

      <v-col>
        <v-autocomplete
          v-model="uploader"
          label="Search by Uploader"
          variant="outlined"
          :items="['atul', 'vaibhav', 'harsh']"
          item-text="fullName"
          item-value="uploader"
          @input="searchByUploader"
        ></v-autocomplete>
      </v-col>
      <v-col>
        <v-btn @click="searchAll" color="primary">Search</v-btn>
      </v-col>
    </v-row>

    <!-- Data table -->
    <v-data-table-server
      v-model:items-per-page="itemsPerPage"
      :headers="headers"
      :items-length="serverItems.length"
      :items="serverItems"
      :loading="loading"
      :search="search.email"
      item-value="name"
      :items-per-page-options="[5, 10, 15, 20, -1]"
      @update:options="loadItems"
    ></v-data-table-server>
  </v-container>
</template>
    
    <script>
import axios from "axios";
export default {
  data() {
    return {
      email: "",
      uploader: "",
      date: null,
      selectedFile: null,
      datePickerModal: false,
      itemsPerPage: 5,
      formattedDate: null,
      loading: false,
      search: "",
      excelFile: null,

      serverItems: [
        {
          index: 1,
          first_name: "atul",
          last_name: "kumar",
          email: "atul@example.com",
          uploader: "atul",
          uploaded_on: "2023-01-01",
        },
        {
          index: 2,
          first_name: "vaibhav",
          last_name: "Mishra",
          email: "vaibhav@example.com",
          uploader: "vaibhav",
          uploaded_on: "2023-01-01",
        },
        {
          index: 3,
          first_name: "harsh",
          last_name: "singh",
          email: "harsh@example.com",
          uploader: "harsh",
          uploaded_on: "2023-01-02",
        },
        {
          index: 4,
          first_name: "atul",
          last_name: "kumar",
          email: "atul@example.com",
          uploader: "atul",
          uploaded_on: "2023-01-01",
        },
        {
          index: 5,
          first_name: "vaibhav",
          last_name: "Mishra",
          email: "vaibhav@example.com",
          uploader: "vaibhav",
          uploaded_on: "2023-01-01",
        },
        {
          index: 6,
          first_name: "harsh",
          last_name: "singh",
          email: "harsh@example.com",
          uploader: "harsh",
          uploaded_on: "2023-01-02",
        },
      ],
      itemsPerPage: 5,
      currentPage: 1,
      headers: [
        { title: "S.No", key: "index" },
        { title: "First Name", key: "first_name" },
        { title: "Last Name", key: "last_name" },
        { title: "Email", key: "email" },
        { title: "Uploader", key: "uploader" },
        { title: "Uploaded On", key: "uploaded_on" },
      ],
      search: { email: "" },
    };
  },
  computed: {
    getUploaderItems() {
      const uploaderItems = this.serverItems.map((item) => {
        return {
          fullName: `${item.first_name} ${item.last_name}`,
          uploader: item.uploader,
        };
      });
      //   return uploaderItems;
    },
  },
  methods: {
    handleFileChange(event) {
      this.file = event.target.files[0];
    },
    // Inside your methods
    async removeDuplicateAndDownload() {
      if (!this.file) {
        alert("Please select a file");
        return;
      }

      const formData = new FormData();
      formData.append("file", this.file);

      try {
        const response = await axios.post("/api/remove-download", formData, {
          headers: {
            "Content-Type": "multipart/form-data",
          },
          responseType: "blob", // Set responseType to blob
        });

        const blob = new Blob([response.data], {
          type: "application/octet-stream",
        });

        const link = document.createElement("a");
        link.href = window.URL.createObjectURL(blob);
        link.download = "new_excel_file.xlsx";

        link.click();
      } catch (error) {
        console.error("Error", error.message);
        alert("Error");
      }
    },
    downloadFile(filePath) {
      // Check if the file exists
      if (filePath) {
        const link = document.createElement("a");
        link.href = filePath;
        link.download = "new_excel_file.xlsx";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      } else {
        console.error("File not available");
        // Handle the error or provide feedback to the user
      }
    },

    searchByEmail() {
      this.search.email = this.email.toLowerCase();
      this.search.date = "";
      this.search.uploader = "";
      this.fetchData();
    },
    fetchData() {
      const filteredData = this.serverItems.filter((item) =>
        this.matchesSearchCriteria(item)
      );
      this.serverItems = filteredData;
      this.totalItems = filteredData.length;
    },
    matchesSearchCriteria(item) {
      const emailMatch = item.email.toLowerCase().includes(this.email);
      const dateMatch = this.date ? item.uploaded_on === this.date : true;
      const uploaderMatch = item.uploader.toLowerCase().includes(this.uploader);
      return emailMatch && dateMatch && uploaderMatch;
    },
    searchByEmailRealTime() {
      console.log("Current Email:", this.email);
      this.search.email = this.email.toLowerCase();
      console.log("Updated Search Email:", this.search.email);
      this.search.date = "";
      this.search.uploader = "";
      this.fetchData();
    },
    openDatePickerModal() {
      this.datePickerModal = true;
    },

    closeDatePickerModal() {
      this.datePickerModal = false;
    },

    saveDate() {
      if (this.date) {
        this.formattedDate = this.formatDate(this.date);
        console.log("Selected Date:", this.formattedDate);
        this.search.date = this.formattedDate;
        this.searchByEmail();
      }
      this.closeDatePickerModal();
    },

    formatDate(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const day = String(date.getDate()).padStart(2, "0");
      return `${year}-${month}-${day}`;
    },

    searchByUploader() {
      console.log("Searching by Uploader...");
    },

    loadItems() {
      console.log("Loaded Items:", this.serverItems);
    },

    searchAll() {
      this.fetchData();
    },
  },
  watch: {
    email: "searchRealTime",
    date: "searchRealTime",
    uploader: "searchRealTime",
  },
};
</script>
    


<style lang="css" scoped>
.row-pointer:hover {
  cursor: pointer;
}

.header {
  /* text-align: center; */
}

.cutout-mode {
  margin-left: 0px !important;
  text-align: right;
}

.cutout-mode button {
  margin-right: 10px;
}
</style>













































ClientController



<?php

namespace App\Http\Controllers;

use App\Exports\ClientExport;
use App\Imports\ClientImport;
use App\Models\Clients;
use Illuminate\Http\Request;
use Log;

use Maatwebsite\Excel\Facades\Excel;
use Maatwebsite\Excel\HeadingRowImport;



class ClientController extends Controller
{
//     public function removeDuplicates(Request $request)
//     {
//         $request->validate([
//             'file' => 'required|mimes:xls,xlsx'
//         ]);
//         $file = $request->file('file')->store('uploads');
//         $headings = (new HeadingRowImport)->toArray($file);
//         $clientData = Excel::toArray([], $file)[0];
// return $clientData;
//         $headers = array_shift($clientData);
//         $emailMap = [];
//         foreach ($clientData as $index => $row) {
//             if($index)
//             $emailMap[$row[2]] = $row;
//         }
//         Clients::where('email'. $email)->exists();

//         $clients = Clients::all(['first_name', 'last_name', 'email'])->keyBy('email')->toArray();
//         foreach ($clients as $email => $client) {
//             if (isset($emailMap[$email])) {
//                 unset($emailMap[$email]);
//             }
//         }
//         $newClientData = array_merge([$headers], array_values($emailMap));
//         Log::debug($newClientData);
//         return Excel::download(new ClientExport($newClientData),'new_excel_file.xlsx');

//     }
public function removeDuplicates(Request $request)
{
    $request->validate([
        'file' => 'required|mimes:xls,xlsx',
    ]);

    $file = $request->file('file')->store('uploads');

    try {
        Excel::import(new ClientImport, $file);
    } catch (\Exception $e) {
        return response()->json(['error' => 'Error during import: ' . $e->getMessage()], 422);
    }

    return response()->json(['message' => 'Clients imported successfully'], 200);
}
}








ClientImport



<?php

namespace App\Imports;

use App\Models\Clients;
use Illuminate\Validation\Rule;
use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Illuminate\Support\Facades\Validator;

class ClientImport implements ToCollection, WithHeadingRow
{
    public function collection(Collection $rows)
    {
        $expectedFields = ['first_name', 'last_name', 'email'];
        $validator =  Validator::make($rows->toArray(), [
            '*.first_name' => 'required',
            '*.last_name' => 'required',
            '*.email' => 'required',
        ]);

        foreach ($expectedFields as $field) {
            $validator->sometimes("$field.*", 'not_in:validation_rule_not_to_be_applied', function ($attribute) {
                return true;
            });
        }

        $validator->validate();


        $additionalFields = collect($rows->first())->keys()->diff($expectedFields);
        if ($additionalFields->isNotEmpty()) {
            throw new \Exception('Invalid fields found: ' . $additionalFields->implode(', '));
        }

        
    }

}








try {
            $file = $request->file('file');
            Excel::import(new ClientImport, $file);
            $clientData = Excel::toArray([], $file)[0];
            $headers = array_shift($clientData);
            $newClientData = [];
        foreach ($clientData as $row) {
            $email = $row[2];
            $existingClient = Client::where('email', $email)->first();
            if (!$existingClient) {
                array_push($newClientData , $row);
            }
        }
        $newClientData = array_merge([$headers], $newClientData);
        Log::debug($newClientData);
        return Excel::download(new ClientExport($newClientData), 'removed_clients.xlsx');





}